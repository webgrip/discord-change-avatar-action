name: CI - Test & Build & Commit

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  build-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

#      - name: Run tests
#        run: npm test

      - name: Build
        run: npm run build

      - name: Commit files & bump version
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add dist
          git commit -m "chore: build dist [skip ci]" || echo "No changes to commit"
          npm version patch -m "chore(release): %s [skip ci]"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      - name: Extract version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Tag "v1" if major=1
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          echo "New version: ${{ steps.get_version.outputs.version }}"
          MAJOR=$(echo "${{ steps.get_version.outputs.version }}" | cut -d. -f1)
          if [ "$MAJOR" = "1" ]; then
            echo "Tagging current commit as 'v1' for version $VERSION"
            git tag -fa v1 -m "chore: v1 tag for $VERSION [skip ci]"
            git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            git push origin v1 --force
          else
            echo "Not major version 1, skipping v1 tag."
          fi

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: v${{ steps.get_version.outputs.version }}
          name: v${{ steps.get_version.outputs.version }}
          body: "Automated release for version ${{ steps.get_version.outputs.version }}."
          draft: false
          prerelease: false
          makeLatest: true
